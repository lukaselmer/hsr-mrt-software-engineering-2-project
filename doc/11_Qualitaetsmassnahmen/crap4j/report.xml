<crap_result>
  <project>
    E:\dev\eclipse_workspace\mrt
  </project>
  <project_id>
    1305575445338
  </project_id>
  <timestamp>
    30.05.11 08:50
  </timestamp>
  <classDirectories>
    <classDirectory>
      E:\dev\eclipse_workspace\mrt\bin
    </classDirectory>
  </classDirectories>
  <testClassDirectories>
    <testClassDirectory>
      E:\dev\eclipse_workspace\mrt\bin
    </testClassDirectory>
  </testClassDirectories>
  <sourceDirectories>
    <sourceDirectory>
      E:\dev\eclipse_workspace\mrt\src
    </sourceDirectory>
    <sourceDirectory>
      E:\dev\eclipse_workspace\mrt\gen
    </sourceDirectory>
    <sourceDirectory>
      E:\dev\eclipse_workspace\mrt\test
    </sourceDirectory>
  </sourceDirectories>
  <libClasspaths>
    <libClasspath>
      E:\mrt
    </libClasspath>
    <libClasspath>
      E:\mrt\lib\ormlite-core-4.22.jar
    </libClasspath>
    <libClasspath>
      E:\mrt\lib\ormlite-android-4.22.jar
    </libClasspath>
    <libClasspath>
      E:\dev\eclipse\plugins\org.junit_3.8.2.v3_8_2_v20100427-1100\junit.jar
    </libClasspath>
    <libClasspath>
      E:\mrt\lib\robotium-solo-2.2.jar
    </libClasspath>
  </libClasspaths>
  <stats>
    <name>
      Method Crap Stats
    </name>
    <totalCrap>
      1648.00
    </totalCrap>
    <crap>
      3.32
    </crap>
    <median>
      2.00
    </median>
    <average>
      3.32
    </average>
    <stdDev>
      3.14
    </stdDev>
    <methodCount>
      497
    </methodCount>
    <crapMethodCount>
      0
    </crapMethodCount>
    <crapMethodPercent>
      0.00
    </crapMethodPercent>
    <crapLoad>
      0
    </crapLoad>
    <crapThreshold>
      30
    </crapThreshold>
    <globalAverage>
      -1.00
    </globalAverage>
    <globalCraploadAverage>
      -1.00
    </globalCraploadAverage>
    <globalCrapMethodAverage>
      -1.00
    </globalCrapMethodAverage>
    <globalTotalMethodAverage>
      -1.00
    </globalTotalMethodAverage>
    <globalAverageDiff>
      4.32
    </globalAverageDiff>
    <globalCraploadAverageDiff>
      1.00
    </globalCraploadAverageDiff>
    <globalCrapMethodAverageDiff>
      1.00
    </globalCrapMethodAverageDiff>
    <globalTotalMethodAverageDiff>
      498.00
    </globalTotalMethodAverageDiff>
    <shareStatsUrl>
      http://www.crap4j.org/benchmark/stats/new?stat[project_hash]=1305575445338&amp;stat[project_url]=mrt&amp;stat[crap]=0.00&amp;stat[crap_load]=0&amp;stat[crap_methods]=0&amp;stat[total_methods]=497&amp;stat[ones]=0&amp;stat[twos]=395&amp;stat[fours]=69&amp;stat[eights]=27&amp;stat[sixteens]=6&amp;stat[thirtytwos]=0&amp;stat[sixtyfours]=0&amp;stat[one28s]=0&amp;stat[two56s]=0
    </shareStatsUrl>
    <histogram>
      <hist>
        <place>
          one
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
      <hist>
        <place>
          two
        </place>
        <value>
          395
        </value>
        <height>
          170.00px
        </height>
      </hist>
      <hist>
        <place>
          four
        </place>
        <value>
          69
        </value>
        <height>
          29.70px
        </height>
      </hist>
      <hist>
        <place>
          eight
        </place>
        <value>
          27
        </value>
        <height>
          28.00px
        </height>
      </hist>
      <hist>
        <place>
          sixteen
        </place>
        <value>
          6
        </value>
        <height>
          28.00px
        </height>
      </hist>
      <hist>
        <place>
          thirtytwo
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
      <hist>
        <place>
          sixtyfour
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
      <hist>
        <place>
          one28
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
      <hist>
        <place>
          two56
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
    </histogram>
  </stats>
  <methods>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        ISO8601DateParserHelperForTests
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        ISO8601DateParserHelperForTests
      </className>
      <methodName>
        formatAndParse
      </methodName>
      <methodSignature>
        (Ljava/util/Date;)Ljava/util/Date;
      </methodSignature>
      <fullMethod>
        public static  java.util.Date formatAndParse(java.util.Date)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        ISO8601DateParserHelperForTests
      </className>
      <methodName>
        formatAndParseToTimestamp
      </methodName>
      <methodSignature>
        (Ljava/util/Date;)Ljava/sql/Timestamp;
      </methodSignature>
      <fullMethod>
        public static  java.sql.Timestamp formatAndParseToTimestamp(java.util.Date)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        ISO8601DateParserHelperForTests
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        (Ljava/util/Date;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public static  java.lang.String toString(java.util.Date)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        R$attr
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        R$drawable
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        R$id
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        R$layout
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        R$menu
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        R$string
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        R$xml
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        R
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        ActivityHelper
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        ActivityHelper
      </className>
      <methodName>
        displayAlertDialog
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;Landroid/app/Activity;)V
      </methodSignature>
      <fullMethod>
        protected static  void displayAlertDialog(java.lang.String, java.lang.String, android.app.Activity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        ActivityHelper
      </className>
      <methodName>
        getAlertDialog
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;Landroid/app/Activity;)Landroid/app/Dialog;
      </methodSignature>
      <fullMethod>
        private static  android.app.Dialog getAlertDialog(java.lang.String, java.lang.String, android.app.Activity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        ActivityHelper
      </className>
      <methodName>
        startSyncService
      </methodName>
      <methodSignature>
        (Landroid/app/Activity;)V
      </methodSignature>
      <fullMethod>
        protected static  void startSyncService(android.app.Activity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationListenerAdapter
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationListenerAdapter
      </className>
      <methodName>
        onLocationChanged
      </methodName>
      <methodSignature>
        (Landroid/location/Location;)V
      </methodSignature>
      <fullMethod>
        public  void onLocationChanged(android.location.Location)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationListenerAdapter
      </className>
      <methodName>
        onProviderDisabled
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void onProviderDisabled(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationListenerAdapter
      </className>
      <methodName>
        onProviderEnabled
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void onProviderEnabled(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationListenerAdapter
      </className>
      <methodName>
        onStatusChanged
      </methodName>
      <methodSignature>
        (Ljava/lang/String;ILandroid/os/Bundle;)V
      </methodSignature>
      <fullMethod>
        public  void onStatusChanged(java.lang.String, int, android.os.Bundle)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationService$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LocationService;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.LocationService)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationService
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Landroid/location/LocationManager;Ljava/lang/Runnable;)V
      </methodSignature>
      <fullMethod>
        protected  void &lt;init&gt;(android.location.LocationManager, java.lang.Runnable)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationService
      </className>
      <methodName>
        access$0
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LocationService;Lch/hsr/se2p/mrt/models/GpsPosition;)V
      </methodSignature>
      <fullMethod>
        static  void access$0(ch.hsr.se2p.mrt.activities.LocationService, ch.hsr.se2p.mrt.models.GpsPosition)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationService
      </className>
      <methodName>
        access$1
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LocationService;)Ljava/lang/Runnable;
      </methodSignature>
      <fullMethod>
        static  java.lang.Runnable access$1(ch.hsr.se2p.mrt.activities.LocationService)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationService
      </className>
      <methodName>
        getCurrentGPSPosition
      </methodName>
      <methodSignature>
        ()Lch/hsr/se2p/mrt/models/GpsPosition;
      </methodSignature>
      <fullMethod>
        protected  ch.hsr.se2p.mrt.models.GpsPosition getCurrentGPSPosition()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationService
      </className>
      <methodName>
        getCurrentLocation
      </methodName>
      <methodSignature>
        ()Landroid/location/Location;
      </methodSignature>
      <fullMethod>
        protected  android.location.Location getCurrentLocation()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationService
      </className>
      <methodName>
        getLocationProvider
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        private  java.lang.String getLocationProvider()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationService
      </className>
      <methodName>
        stop
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void stop()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LoginActivity;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.LoginActivity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity$1
      </className>
      <methodName>
        onClick
      </methodName>
      <methodSignature>
        (Landroid/view/View;)V
      </methodSignature>
      <fullMethod>
        public  void onClick(android.view.View)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        access$0
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LoginActivity;)V
      </methodSignature>
      <fullMethod>
        static  void access$0(ch.hsr.se2p.mrt.activities.LoginActivity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        createClickListener
      </methodName>
      <methodSignature>
        (Landroid/widget/Button;)V
      </methodSignature>
      <fullMethod>
        private  void createClickListener(android.widget.Button)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        initApplication
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void initApplication()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        initData
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void initData()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        onCreate
      </methodName>
      <methodSignature>
        (Landroid/os/Bundle;)V
      </methodSignature>
      <fullMethod>
        public  void onCreate(android.os.Bundle)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        switchToTimeEntryActivity
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void switchToTimeEntryActivity()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LoginActivityTest;Ljava/lang/String;Ljava/lang/String;Z)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.LoginActivityTest, java.lang.String, java.lang.String, boolean)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest$1
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest$2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LoginActivityTest;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.LoginActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest$2
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        access$0
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LoginActivityTest;)Landroid/widget/EditText;
      </methodSignature>
      <fullMethod>
        static  android.widget.EditText access$0(ch.hsr.se2p.mrt.activities.LoginActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        access$1
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LoginActivityTest;)Landroid/widget/EditText;
      </methodSignature>
      <fullMethod>
        static  android.widget.EditText access$1(ch.hsr.se2p.mrt.activities.LoginActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        access$2
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LoginActivityTest;)Landroid/widget/CheckBox;
      </methodSignature>
      <fullMethod>
        static  android.widget.CheckBox access$2(ch.hsr.se2p.mrt.activities.LoginActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        access$3
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/LoginActivityTest;)Landroid/widget/Button;
      </methodSignature>
      <fullMethod>
        static  android.widget.Button access$3(ch.hsr.se2p.mrt.activities.LoginActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        assertLoginDataErrorIsDisplayed
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void assertLoginDataErrorIsDisplayed()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        assertLoginDataErrorIsNotDisplayed
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void assertLoginDataErrorIsNotDisplayed()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        assertLoginDataIsNull
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void assertLoginDataIsNull()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        fillInLoginForm
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;Z)V
      </methodSignature>
      <fullMethod>
        private  void fillInLoginForm(java.lang.String, java.lang.String, boolean)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        performClickOnLoginButton
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void performClickOnLoginButton()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        resetPreferences
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void resetPreferences()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        retrieveWidgetsById
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void retrieveWidgetsById()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        setPreferences
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void setPreferences()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        tearDown
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void tearDown()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        testAReset
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testAReset()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        testLoginUnsuccessfulWithoutPreferencesSaved
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testLoginUnsuccessfulWithoutPreferencesSaved()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        testNoEmailSuppliedWithoutPreferencesSaved
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testNoEmailSuppliedWithoutPreferencesSaved()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        testNoLoginDataSuppliedWithoutPreferencesSaved
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testNoLoginDataSuppliedWithoutPreferencesSaved()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        testNoPasswordSuppliedWithoutPreferencesSaved
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testNoPasswordSuppliedWithoutPreferencesSaved()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        testPreconditions
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testPreconditions()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        testZLoginSuccessfulWithPreferencesSaved
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testZLoginSuccessfulWithPreferencesSaved()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivityTest
      </className>
      <methodName>
        testZLoginSuccessfulWithoutPreferencesSaved
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testZLoginSuccessfulWithoutPreferencesSaved()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTApplicationTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTApplicationTest
      </className>
      <methodName>
        setPreferencesAndLogin
      </methodName>
      <methodSignature>
        (Z)V
      </methodSignature>
      <fullMethod>
        private  void setPreferencesAndLogin(boolean)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTApplicationTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTApplicationTest
      </className>
      <methodName>
        testInitialMRTApplication
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testInitialMRTApplication()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTApplicationTest
      </className>
      <methodName>
        testLoginWithCredentials
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testLoginWithCredentials()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTApplicationTest
      </className>
      <methodName>
        testLoginWithoutCredentials
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testLoginWithoutCredentials()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTApplicationTest
      </className>
      <methodName>
        testLogout
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testLogout()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/MRTAutocompleteSpinner;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.MRTAutocompleteSpinner)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner$1
      </className>
      <methodName>
        onClick
      </methodName>
      <methodSignature>
        (Landroid/view/View;)V
      </methodSignature>
      <fullMethod>
        public  void onClick(android.view.View)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Landroid/content/Context;Landroid/util/AttributeSet;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(android.content.Context, android.util.AttributeSet)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        access$0
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/MRTAutocompleteSpinner;)Landroid/widget/AutoCompleteTextView;
      </methodSignature>
      <fullMethod>
        static  android.widget.AutoCompleteTextView access$0(ch.hsr.se2p.mrt.activities.MRTAutocompleteSpinner)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        getButtonListener
      </methodName>
      <methodSignature>
        ()Landroid/view/View$OnClickListener;
      </methodSignature>
      <fullMethod>
        private  android.view.View$OnClickListener getButtonListener()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        getInputTypeForTextView
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        private  int getInputTypeForTextView()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        getText
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        protected  java.lang.String getText()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        initButton
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void initButton()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        initControls
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void initControls()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        initTextView
      </methodName>
      <methodSignature>
        (Landroid/content/Context;)V
      </methodSignature>
      <fullMethod>
        private  void initTextView(android.content.Context)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        resetText
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void resetText()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        setAdapter
      </methodName>
      <methodSignature>
        (Landroid/widget/ArrayAdapter&lt;Lch/hsr/se2p/mrt/models/Customer;&gt;;)V
      </methodSignature>
      <fullMethod>
        protected  void setAdapter(android.widget.ArrayAdapter&lt;ch.hsr.se2p.mrt.models.Customer&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        MRTAutocompleteSpinner
      </className>
      <methodName>
        setText
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        protected  void setText(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        Measurement
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        Measurement
      </className>
      <methodName>
        getTimeEntry
      </methodName>
      <methodSignature>
        ()Lch/hsr/se2p/mrt/models/TimeEntry;
      </methodSignature>
      <fullMethod>
        public  ch.hsr.se2p.mrt.models.TimeEntry getTimeEntry()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        Measurement
      </className>
      <methodName>
        isStarted
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean isStarted()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        Measurement
      </className>
      <methodName>
        start
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void start()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        Measurement
      </className>
      <methodName>
        stop
      </methodName>
      <methodSignature>
        (Landroid/widget/Spinner;Landroid/widget/TextView;Ljava/lang/Integer;Lch/hsr/se2p/mrt/activities/MRTAutocompleteSpinner;Ljava/util/List&lt;Lch/hsr/se2p/mrt/models/Customer;&gt;;)Lch/hsr/se2p/mrt/models/TimeEntry;
      </methodSignature>
      <fullMethod>
        public  ch.hsr.se2p.mrt.models.TimeEntry stop(android.widget.Spinner, android.widget.TextView, java.lang.Integer, ch.hsr.se2p.mrt.activities.MRTAutocompleteSpinner, java.util.List&lt;ch.hsr.se2p.mrt.models.Customer&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivity;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.TimeEntryActivity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity$1
      </className>
      <methodName>
        onClick
      </methodName>
      <methodSignature>
        (Landroid/view/View;)V
      </methodSignature>
      <fullMethod>
        public  void onClick(android.view.View)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity$2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivity;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.TimeEntryActivity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity$2
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        access$0
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivity;)V
      </methodSignature>
      <fullMethod>
        static  void access$0(ch.hsr.se2p.mrt.activities.TimeEntryActivity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        access$1
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivity;)V
      </methodSignature>
      <fullMethod>
        static  void access$1(ch.hsr.se2p.mrt.activities.TimeEntryActivity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        access$2
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivity;)V
      </methodSignature>
      <fullMethod>
        static  void access$2(ch.hsr.se2p.mrt.activities.TimeEntryActivity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        access$3
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivity;Z)V
      </methodSignature>
      <fullMethod>
        static  void access$3(ch.hsr.se2p.mrt.activities.TimeEntryActivity, boolean)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        initComboboxCustomers
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void initComboboxCustomers()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        initGui
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void initGui()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        initLocationService
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void initLocationService()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        initSpinnerTimeEntryTypes
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void initSpinnerTimeEntryTypes()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        loadCustomers
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void loadCustomers()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        loadLists
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void loadLists()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        loadTimeEntryTypes
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void loadTimeEntryTypes()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        logAndDisplaySQLException
      </methodName>
      <methodSignature>
        (Ljava/sql/SQLException;)V
      </methodSignature>
      <fullMethod>
        private  void logAndDisplaySQLException(java.sql.SQLException)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        logout
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void logout()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        onCreate
      </methodName>
      <methodSignature>
        (Landroid/os/Bundle;)V
      </methodSignature>
      <fullMethod>
        public  void onCreate(android.os.Bundle)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        onCreateOptionsMenu
      </methodName>
      <methodSignature>
        (Landroid/view/Menu;)Z
      </methodSignature>
      <fullMethod>
        public  boolean onCreateOptionsMenu(android.view.Menu)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        resetInputFields
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void resetInputFields()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        saveTimeEntry
      </methodName>
      <methodSignature>
        ()Lch/hsr/se2p/mrt/models/TimeEntry;
      </methodSignature>
      <fullMethod>
        private  ch.hsr.se2p.mrt.models.TimeEntry saveTimeEntry()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        sortCustomersByCurrentLocation
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void sortCustomersByCurrentLocation()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        stopTimeMeasurement
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void stopTimeMeasurement()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        updateGuiAfterMeasurement
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
        private  void updateGuiAfterMeasurement(java.lang.String, java.lang.String, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityDemoTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityDemoTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityDemoTest
      </className>
      <methodName>
        tearDown
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void tearDown()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityDemoTest
      </className>
      <methodName>
        testCreateTimeEntries
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testCreateTimeEntries()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityDemoTest
      </className>
      <methodName>
        testPreconditions
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testPreconditions()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityDemoTest
      </className>
      <methodName>
        testWelcomeText
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testWelcomeText()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivityTest;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.TimeEntryActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest$1
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest$2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivityTest;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.TimeEntryActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest$2
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest$3
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivityTest;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.TimeEntryActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest$3
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest$4
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivityTest;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.activities.TimeEntryActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest$4
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        access$0
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivityTest;)Lch/hsr/se2p/mrt/activities/MRTAutocompleteSpinner;
      </methodSignature>
      <fullMethod>
        static  ch.hsr.se2p.mrt.activities.MRTAutocompleteSpinner access$0(ch.hsr.se2p.mrt.activities.TimeEntryActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        access$1
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivityTest;)Landroid/widget/TextView;
      </methodSignature>
      <fullMethod>
        static  android.widget.TextView access$1(ch.hsr.se2p.mrt.activities.TimeEntryActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        access$2
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivityTest;)Landroid/widget/Spinner;
      </methodSignature>
      <fullMethod>
        static  android.widget.Spinner access$2(ch.hsr.se2p.mrt.activities.TimeEntryActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        access$3
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/TimeEntryActivityTest;)Lch/hsr/se2p/mrt/models/Customer;
      </methodSignature>
      <fullMethod>
        static  ch.hsr.se2p.mrt.models.Customer access$3(ch.hsr.se2p.mrt.activities.TimeEntryActivityTest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        getTimeEntry
      </methodName>
      <methodSignature>
        (I)Lch/hsr/se2p/mrt/models/TimeEntry;
      </methodSignature>
      <fullMethod>
        private  ch.hsr.se2p.mrt.models.TimeEntry getTimeEntry(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        getTimeEntryDaoCount
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        private  int getTimeEntryDaoCount()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        getTimeEntryType
      </methodName>
      <methodSignature>
        (I)Lch/hsr/se2p/mrt/models/TimeEntryType;
      </methodSignature>
      <fullMethod>
        private  ch.hsr.se2p.mrt.models.TimeEntryType getTimeEntryType(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        getTimeEntryTypeDao
      </methodName>
      <methodSignature>
        ()Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntryType;Ljava/lang/Integer;&gt;;
      </methodSignature>
      <fullMethod>
        private  com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntryType, java.lang.Integer&gt; getTimeEntryTypeDao()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        performClickOnButton
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        private  void performClickOnButton(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        retrieveWidgetsById
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void retrieveWidgetsById()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        setCustomerName
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void setCustomerName()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        setDescription
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void setDescription()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        sortTimeEntryTypes
      </methodName>
      <methodSignature>
        ()Ljava/util/List&lt;Lch/hsr/se2p/mrt/models/TimeEntryType;&gt;;
      </methodSignature>
      <fullMethod>
        private  java.util.List&lt;ch.hsr.se2p.mrt.models.TimeEntryType&gt; sortTimeEntryTypes()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        tearDown
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void tearDown()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        testDescription
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testDescription()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        testPreconditions
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testPreconditions()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        testSelectionCustomer
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testSelectionCustomer()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        testStandardDialog
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testStandardDialog()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        getCurrentUser
      </methodName>
      <methodSignature>
        ()Lch/hsr/se2p/mrt/models/User;
      </methodSignature>
      <fullMethod>
        public  ch.hsr.se2p.mrt.models.User getCurrentUser()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        getEmail
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getEmail()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        getHttpHelper
      </methodName>
      <methodSignature>
        ()Lch/hsr/se2p/mrt/network/HttpHelper;
      </methodSignature>
      <fullMethod>
        public  ch.hsr.se2p.mrt.network.HttpHelper getHttpHelper()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        getPassword
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getPassword()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        getPreferences
      </methodName>
      <methodSignature>
        ()Landroid/content/SharedPreferences;
      </methodSignature>
      <fullMethod>
        public  android.content.SharedPreferences getPreferences()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        setPreferences
      </methodName>
      <methodSignature>
        (Landroid/content/SharedPreferences;)V
      </methodSignature>
      <fullMethod>
        public  void setPreferences(android.content.SharedPreferences)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Landroid/content/Context;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(android.content.Context)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        close
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void close()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        onUpgrade
      </methodName>
      <methodSignature>
        (Landroid/database/sqlite/SQLiteDatabase;Lcom/j256/ormlite/support/ConnectionSource;II)V
      </methodSignature>
      <fullMethod>
        public  void onUpgrade(android.database.sqlite.SQLiteDatabase, com.j256.ormlite.support.ConnectionSource, int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        reset
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void reset()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelperTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelperTest
      </className>
      <methodName>
        testCreateDatabase
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testCreateDatabase()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseSpec
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseSpec
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database.mocks
      </package>
      <className>
        DatabaseHelperMock
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Landroid/content/Context;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(android.content.Context)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database.mocks
      </package>
      <className>
        DatabaseHelperMock
      </className>
      <methodName>
        deleteDatabase
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void deleteDatabase()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Double;)V
      </methodSignature>
      <fullMethod>
        protected  void &lt;init&gt;(java.lang.String, java.lang.String, java.lang.String, java.lang.Double)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        compareLastName
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)I
      </methodSignature>
      <fullMethod>
        private  int compareLastName(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        compareTo
      </methodName>
      <methodSignature>
        (Ljava/lang/Object;)I
      </methodSignature>
      <fullMethod>
        public  int compareTo(java.lang.Object)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getDistance
      </methodName>
      <methodSignature>
        ()Ljava/lang/Double;
      </methodSignature>
      <fullMethod>
        public  java.lang.Double getDistance()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getFirstName
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getFirstName()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getGpsPosition
      </methodName>
      <methodSignature>
        ()Lch/hsr/se2p/mrt/models/GpsPosition;
      </methodSignature>
      <fullMethod>
        public  ch.hsr.se2p.mrt.models.GpsPosition getGpsPosition()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getGpsPositionId
      </methodName>
      <methodSignature>
        ()Ljava/lang/Integer;
      </methodSignature>
      <fullMethod>
        public  java.lang.Integer getGpsPositionId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getId
      </methodName>
      <methodSignature>
        ()Ljava/lang/Integer;
      </methodSignature>
      <fullMethod>
        public  java.lang.Integer getId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getIdOnServer
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getIdOnServer()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getLastName
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getLastName()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getPhone
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getPhone()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getRoundedDistance
      </methodName>
      <methodSignature>
        ()Ljava/lang/Long;
      </methodSignature>
      <fullMethod>
        private  java.lang.Long getRoundedDistance()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getUpdatedAt
      </methodName>
      <methodSignature>
        ()Ljava/sql/Timestamp;
      </methodSignature>
      <fullMethod>
        public  java.sql.Timestamp getUpdatedAt()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        hasChanged
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean hasChanged()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        isDeleted
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean isDeleted()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        setChanged
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void setChanged()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        setChanged
      </methodName>
      <methodSignature>
        (Z)V
      </methodSignature>
      <fullMethod>
        public  void setChanged(boolean)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        setDistance
      </methodName>
      <methodSignature>
        (Ljava/lang/Double;)V
      </methodSignature>
      <fullMethod>
        public  void setDistance(java.lang.Double)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        setGpsPosition
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/GpsPosition;)V
      </methodSignature>
      <fullMethod>
        public  void setGpsPosition(ch.hsr.se2p.mrt.models.GpsPosition)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        CustomerTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        CustomerTest
      </className>
      <methodName>
        getCustomerJSON
      </methodName>
      <methodSignature>
        ()Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        private  org.json.JSONObject getCustomerJSON()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        CustomerTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        CustomerTest
      </className>
      <methodName>
        testCustomerSort
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testCustomerSort()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        CustomerTest
      </className>
      <methodName>
        testInitialCustomer
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testInitialCustomer()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (DD)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(double, double)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (JDD)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(long, double, double)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Landroid/location/Location;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(android.location.Location)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        distance
      </methodName>
      <methodSignature>
        (DDDD)F
      </methodSignature>
      <fullMethod>
        private  float distance(double, double, double, double)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        distanceTo
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/GpsPosition;)D
      </methodSignature>
      <fullMethod>
        public  double distanceTo(ch.hsr.se2p.mrt.models.GpsPosition)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        getId
      </methodName>
      <methodSignature>
        ()Ljava/lang/Integer;
      </methodSignature>
      <fullMethod>
        public  java.lang.Integer getId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        getLatitude
      </methodName>
      <methodSignature>
        ()D
      </methodSignature>
      <fullMethod>
        public  double getLatitude()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        getLongitude
      </methodName>
      <methodSignature>
        ()D
      </methodSignature>
      <fullMethod>
        public  double getLongitude()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPosition
      </className>
      <methodName>
        toJSONObject
      </methodName>
      <methodSignature>
        ()Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        public  org.json.JSONObject toJSONObject()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPositionTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPositionTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        GpsPositionTest
      </className>
      <methodName>
        testDistanceTo
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testDistanceTo()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        ISO8601DateParser
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        ISO8601DateParser
      </className>
      <methodName>
        format
      </methodName>
      <methodSignature>
        (Ljava/util/Date;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        protected static  java.lang.String format(java.util.Date)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        ISO8601DateParser
      </className>
      <methodName>
        parse
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/text/SimpleDateFormat;)Ljava/util/Date;
      </methodSignature>
      <fullMethod>
        private static  java.util.Date parse(java.lang.String, java.text.SimpleDateFormat)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/sql/Timestamp;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.sql.Timestamp)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        getCustomerId
      </methodName>
      <methodSignature>
        ()Ljava/lang/Integer;
      </methodSignature>
      <fullMethod>
        public  java.lang.Integer getCustomerId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        getDescription
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getDescription()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        getGpsPositionId
      </methodName>
      <methodSignature>
        ()Ljava/lang/Integer;
      </methodSignature>
      <fullMethod>
        public  java.lang.Integer getGpsPositionId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        getHashcode
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getHashcode()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        getId
      </methodName>
      <methodSignature>
        ()Ljava/lang/Integer;
      </methodSignature>
      <fullMethod>
        public  java.lang.Integer getId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        getIdOnServer
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getIdOnServer()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        getTimeEntryTypeId
      </methodName>
      <methodSignature>
        ()Ljava/lang/Integer;
      </methodSignature>
      <fullMethod>
        public  java.lang.Integer getTimeEntryTypeId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        getTimeStart
      </methodName>
      <methodSignature>
        ()Ljava/sql/Timestamp;
      </methodSignature>
      <fullMethod>
        public  java.sql.Timestamp getTimeStart()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        getTimeStop
      </methodName>
      <methodSignature>
        ()Ljava/sql/Timestamp;
      </methodSignature>
      <fullMethod>
        public  java.sql.Timestamp getTimeStop()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        isTransmitted
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean isTransmitted()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        putMembersToJson
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)V
      </methodSignature>
      <fullMethod>
        private  void putMembersToJson(org.json.JSONObject)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setCustomer
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)V
      </methodSignature>
      <fullMethod>
        public  void setCustomer(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setCustomerId
      </methodName>
      <methodSignature>
        (Ljava/lang/Integer;)V
      </methodSignature>
      <fullMethod>
        public  void setCustomerId(java.lang.Integer)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setDescription
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void setDescription(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setGpsPosition
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/GpsPosition;)V
      </methodSignature>
      <fullMethod>
        public  void setGpsPosition(ch.hsr.se2p.mrt.models.GpsPosition)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setGpsPositionId
      </methodName>
      <methodSignature>
        (Ljava/lang/Integer;)V
      </methodSignature>
      <fullMethod>
        public  void setGpsPositionId(java.lang.Integer)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setRailsId
      </methodName>
      <methodSignature>
        (Ljava/lang/Integer;)V
      </methodSignature>
      <fullMethod>
        public  void setRailsId(java.lang.Integer)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setTimeEntryType
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/TimeEntryType;)V
      </methodSignature>
      <fullMethod>
        public  void setTimeEntryType(ch.hsr.se2p.mrt.models.TimeEntryType)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setTimeEntryTypeId
      </methodName>
      <methodSignature>
        (Ljava/lang/Integer;)V
      </methodSignature>
      <fullMethod>
        public  void setTimeEntryTypeId(java.lang.Integer)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setTimeStop
      </methodName>
      <methodSignature>
        (Ljava/sql/Timestamp;)V
      </methodSignature>
      <fullMethod>
        public  void setTimeStop(java.sql.Timestamp)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        setTransmitted
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void setTransmitted()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        toJSONObject
      </methodName>
      <methodSignature>
        ()Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        public  org.json.JSONObject toJSONObject()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTest
      </className>
      <methodName>
        tearDown
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void tearDown()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTest
      </className>
      <methodName>
        testToJSON
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testToJSON()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/Integer;Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.lang.Integer, java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        compareTo
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/TimeEntryType;)I
      </methodSignature>
      <fullMethod>
        public  int compareTo(ch.hsr.se2p.mrt.models.TimeEntryType)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        compareTo
      </methodName>
      <methodSignature>
        (Ljava/lang/Object;)I
      </methodSignature>
      <fullMethod>
        public  int compareTo(java.lang.Object)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        getCreatedAt
      </methodName>
      <methodSignature>
        ()Ljava/sql/Timestamp;
      </methodSignature>
      <fullMethod>
        public  java.sql.Timestamp getCreatedAt()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        getId
      </methodName>
      <methodSignature>
        ()Ljava/lang/Integer;
      </methodSignature>
      <fullMethod>
        public  java.lang.Integer getId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        getIdOnServer
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getIdOnServer()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        getName
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getName()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        getUpdatedAt
      </methodName>
      <methodSignature>
        ()Ljava/sql/Timestamp;
      </methodSignature>
      <fullMethod>
        public  java.sql.Timestamp getUpdatedAt()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        getValidUntil
      </methodName>
      <methodSignature>
        ()Ljava/sql/Timestamp;
      </methodSignature>
      <fullMethod>
        public  java.sql.Timestamp getValidUntil()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        isDeleted
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean isDeleted()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTypeTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTypeTest
      </className>
      <methodName>
        getTimeEntryTypeJSON
      </methodName>
      <methodSignature>
        ()Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        private  org.json.JSONObject getTimeEntryTypeJSON()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTypeTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTypeTest
      </className>
      <methodName>
        testTimeEntryTypeSort
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testTimeEntryTypeSort()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        User
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        User
      </className>
      <methodName>
        getEmail
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getEmail()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        User
      </className>
      <methodName>
        getFirstName
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getFirstName()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        User
      </className>
      <methodName>
        getId
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        User
      </className>
      <methodName>
        getIdOnServer
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getIdOnServer()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        User
      </className>
      <methodName>
        getLastName
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getLastName()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        User
      </className>
      <methodName>
        getRailsId
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getRailsId()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        User
      </className>
      <methodName>
        getUpdatedAt
      </methodName>
      <methodSignature>
        ()Ljava/sql/Timestamp;
      </methodSignature>
      <fullMethod>
        public  java.sql.Timestamp getUpdatedAt()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        UserTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        UserTest
      </className>
      <methodName>
        getUserJSON
      </methodName>
      <methodSignature>
        ()Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        private  org.json.JSONObject getUserJSON()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        UserTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        UserTest
      </className>
      <methodName>
        testInitialUser
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testInitialUser()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelper
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/network/HttpHelper;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(ch.hsr.se2p.mrt.network.HttpHelper)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelper
      </className>
      <methodName>
        synchronizeRequest
      </methodName>
      <methodSignature>
        (Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        private  java.lang.String synchronizeRequest(java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        getCustomer
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/sql/Timestamp;)Lch/hsr/se2p/mrt/models/Customer;
      </methodSignature>
      <fullMethod>
        private  ch.hsr.se2p.mrt.models.Customer getCustomer(java.lang.String, java.lang.String, int, java.lang.String, java.sql.Timestamp)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        getCustomer
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/sql/Timestamp;Z)Lch/hsr/se2p/mrt/models/Customer;
      </methodSignature>
      <fullMethod>
        private  ch.hsr.se2p.mrt.models.Customer getCustomer(java.lang.String, java.lang.String, int, java.lang.String, java.sql.Timestamp, boolean)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        getCustomerJSON
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        private  org.json.JSONObject getCustomerJSON(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        getTimestamp
      </methodName>
      <methodSignature>
        (J)Ljava/sql/Timestamp;
      </methodSignature>
      <fullMethod>
        private  java.sql.Timestamp getTimestamp(long)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        testAddCustomerSynchronization
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testAddCustomerSynchronization()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        testDeleteCustomerSynchronization
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testDeleteCustomerSynchronization()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        testInitialSynchronization
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testInitialSynchronization()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        testUpdateCustomerSynchronization
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testUpdateCustomerSynchronization()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        doHttpPost
      </methodName>
      <methodSignature>
        (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        protected  java.lang.String doHttpPost(java.lang.Object, java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        doHttpRequest
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/Object;Lorg/apache/http/client/methods/HttpEntityEnclosingRequestBase;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        protected  java.lang.String doHttpRequest(java.lang.String, java.lang.Object, org.apache.http.client.methods.HttpEntityEnclosingRequestBase)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        executeRequest
      </methodName>
      <methodSignature>
        (Lorg/apache/http/client/HttpClient;Lorg/apache/http/client/methods/HttpEntityEnclosingRequestBase;)Lorg/apache/http/HttpResponse;
      </methodSignature>
      <fullMethod>
        protected  org.apache.http.HttpResponse executeRequest(org.apache.http.client.HttpClient, org.apache.http.client.methods.HttpEntityEnclosingRequestBase)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        getCookie
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        protected  java.lang.String getCookie()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        getHttpClient
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/client/HttpClient;
      </methodSignature>
      <fullMethod>
        protected  org.apache.http.client.HttpClient getHttpClient()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        getHttpParams
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/params/HttpParams;
      </methodSignature>
      <fullMethod>
        protected  org.apache.http.params.HttpParams getHttpParams()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        getHttpPost
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lorg/apache/http/client/methods/HttpEntityEnclosingRequestBase;
      </methodSignature>
      <fullMethod>
        protected  org.apache.http.client.methods.HttpEntityEnclosingRequestBase getHttpPost(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelperTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpTestCase$1$1$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/network/HttpTestCase$1$1;Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.network.HttpTestCase$1$1, java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpTestCase$1$1$1
      </className>
      <methodName>
        getEntity
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/HttpEntity;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.HttpEntity getEntity()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpTestCase$1$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/network/HttpTestCase$1;Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.network.HttpTestCase$1, java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpTestCase$1$1
      </className>
      <methodName>
        execute
      </methodName>
      <methodSignature>
        (Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpTestCase$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/network/HttpTestCase;Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(ch.hsr.se2p.mrt.network.HttpTestCase, java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpTestCase$1
      </className>
      <methodName>
        getHttpClient
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/client/HttpClient;
      </methodSignature>
      <fullMethod>
        protected  org.apache.http.client.HttpClient getHttpClient()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpTestCase
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpTestCase
      </className>
      <methodName>
        expectedResultFromTransmitter
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        protected  void expectedResultFromTransmitter(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        NetworkConfig
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        SynchronizationException
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/Exception;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.lang.Exception)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryHelper
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryHelper
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/network/HttpHelper;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(ch.hsr.se2p.mrt.network.HttpHelper)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryHelper
      </className>
      <methodName>
        confirm
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/interfaces/Confirmable;)Z
      </methodSignature>
      <fullMethod>
        public  boolean confirm(ch.hsr.se2p.mrt.interfaces.Confirmable)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryHelper
      </className>
      <methodName>
        getJSONParameters
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        private  java.lang.Object getJSONParameters(org.json.JSONObject)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryHelperTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryHelperTest
      </className>
      <methodName>
        testTimeEntryTransmission
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testTimeEntryTransmission()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryTypeHelper
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/network/HttpHelper;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(ch.hsr.se2p.mrt.network.HttpHelper)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryTypeHelper
      </className>
      <methodName>
        synchronizeRequest
      </methodName>
      <methodSignature>
        (Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        private  java.lang.String synchronizeRequest(java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        UserHelper
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/network/HttpHelper;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(ch.hsr.se2p.mrt.network.HttpHelper)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        UserHelper
      </className>
      <methodName>
        generateJSONObject
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;)Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        protected  org.json.JSONObject generateJSONObject(java.lang.String, java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        UserHelper
      </className>
      <methodName>
        login
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;Lch/hsr/se2p/mrt/interfaces/Receivable;)Z
      </methodSignature>
      <fullMethod>
        public  boolean login(java.lang.String, java.lang.String, ch.hsr.se2p.mrt.interfaces.Receivable)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        UserHelperTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        UserHelperTest
      </className>
      <methodName>
        testLogin
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testLogin()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        UserHelperTest
      </className>
      <methodName>
        testLoginFails
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testLoginFails()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        UserHelperTest
      </className>
      <methodName>
        testLoginFailsWithServer
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testLoginFailsWithServer()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        execute
      </methodName>
      <methodSignature>
        (Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;)Lorg/apache/http/HttpResponse;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        execute
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;Lorg/apache/http/client/ResponseHandler&lt;+TT;&gt;;)TT;
      </methodSignature>
      <fullMethod>
        public  T execute&lt;T&gt;(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler&lt;? extends T&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        execute
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;Lorg/apache/http/client/ResponseHandler&lt;+TT;&gt;;Lorg/apache/http/protocol/HttpContext;)TT;
      </methodSignature>
      <fullMethod>
        public  T execute&lt;T&gt;(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.client.ResponseHandler&lt;? extends T&gt;, org.apache.http.protocol.HttpContext)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        execute
      </methodName>
      <methodSignature>
        (Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)Lorg/apache/http/HttpResponse;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        execute
      </methodName>
      <methodSignature>
        (Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        execute
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Lorg/apache/http/client/methods/HttpUriRequest;Lorg/apache/http/client/ResponseHandler&lt;+TT;&gt;;)TT;
      </methodSignature>
      <fullMethod>
        public  T execute&lt;T&gt;(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler&lt;? extends T&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        execute
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Lorg/apache/http/client/methods/HttpUriRequest;Lorg/apache/http/client/ResponseHandler&lt;+TT;&gt;;Lorg/apache/http/protocol/HttpContext;)TT;
      </methodSignature>
      <fullMethod>
        public  T execute&lt;T&gt;(org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.ResponseHandler&lt;? extends T&gt;, org.apache.http.protocol.HttpContext)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        execute
      </methodName>
      <methodSignature>
        (Lorg/apache/http/client/methods/HttpUriRequest;Lorg/apache/http/protocol/HttpContext;)Lorg/apache/http/HttpResponse;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        getConnectionManager
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/conn/ClientConnectionManager;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.conn.ClientConnectionManager getConnectionManager()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpClient
      </className>
      <methodName>
        getParams
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/params/HttpParams;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.params.HttpParams getParams()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        consumeContent
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void consumeContent()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        getContent
      </methodName>
      <methodSignature>
        ()Ljava/io/InputStream;
      </methodSignature>
      <fullMethod>
        public  java.io.InputStream getContent()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        getContentEncoding
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/Header;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.Header getContentEncoding()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        getContentLength
      </methodName>
      <methodSignature>
        ()J
      </methodSignature>
      <fullMethod>
        public  long getContentLength()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        getContentType
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/Header;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.Header getContentType()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        isChunked
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean isChunked()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        isRepeatable
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean isRepeatable()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        isStreaming
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean isStreaming()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpEntity
      </className>
      <methodName>
        writeTo
      </methodName>
      <methodSignature>
        (Ljava/io/OutputStream;)V
      </methodSignature>
      <fullMethod>
        public  void writeTo(java.io.OutputStream)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        addHeader
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void addHeader(java.lang.String, java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        addHeader
      </methodName>
      <methodSignature>
        (Lorg/apache/http/Header;)V
      </methodSignature>
      <fullMethod>
        public  void addHeader(org.apache.http.Header)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        containsHeader
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Z
      </methodSignature>
      <fullMethod>
        public  boolean containsHeader(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        getAllHeaders
      </methodName>
      <methodSignature>
        ()[Lorg/apache/http/Header;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.Header[] getAllHeaders()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        getEntity
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/HttpEntity;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.HttpEntity getEntity()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        getFirstHeader
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lorg/apache/http/Header;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.Header getFirstHeader(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        getHeaders
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)[Lorg/apache/http/Header;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.Header[] getHeaders(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        getLastHeader
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lorg/apache/http/Header;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.Header getLastHeader(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        getLocale
      </methodName>
      <methodSignature>
        ()Ljava/util/Locale;
      </methodSignature>
      <fullMethod>
        public  java.util.Locale getLocale()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        getParams
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/params/HttpParams;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.params.HttpParams getParams()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        getProtocolVersion
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/ProtocolVersion;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.ProtocolVersion getProtocolVersion()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        getStatusLine
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/StatusLine;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.StatusLine getStatusLine()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        headerIterator
      </methodName>
      <methodSignature>
        ()Lorg/apache/http/HeaderIterator;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.HeaderIterator headerIterator()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        headerIterator
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lorg/apache/http/HeaderIterator;
      </methodSignature>
      <fullMethod>
        public  org.apache.http.HeaderIterator headerIterator(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        removeHeader
      </methodName>
      <methodSignature>
        (Lorg/apache/http/Header;)V
      </methodSignature>
      <fullMethod>
        public  void removeHeader(org.apache.http.Header)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        removeHeaders
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void removeHeaders(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setEntity
      </methodName>
      <methodSignature>
        (Lorg/apache/http/HttpEntity;)V
      </methodSignature>
      <fullMethod>
        public  void setEntity(org.apache.http.HttpEntity)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setHeader
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void setHeader(java.lang.String, java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setHeader
      </methodName>
      <methodSignature>
        (Lorg/apache/http/Header;)V
      </methodSignature>
      <fullMethod>
        public  void setHeader(org.apache.http.Header)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setHeaders
      </methodName>
      <methodSignature>
        ([Lorg/apache/http/Header;)V
      </methodSignature>
      <fullMethod>
        public  void setHeaders(org.apache.http.Header[])
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setLocale
      </methodName>
      <methodSignature>
        (Ljava/util/Locale;)V
      </methodSignature>
      <fullMethod>
        public  void setLocale(java.util.Locale)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setParams
      </methodName>
      <methodSignature>
        (Lorg/apache/http/params/HttpParams;)V
      </methodSignature>
      <fullMethod>
        public  void setParams(org.apache.http.params.HttpParams)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setReasonPhrase
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void setReasonPhrase(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setStatusCode
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void setStatusCode(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setStatusLine
      </methodName>
      <methodSignature>
        (Lorg/apache/http/ProtocolVersion;I)V
      </methodSignature>
      <fullMethod>
        public  void setStatusLine(org.apache.http.ProtocolVersion, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setStatusLine
      </methodName>
      <methodSignature>
        (Lorg/apache/http/ProtocolVersion;ILjava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void setStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network.mocks
      </package>
      <className>
        MockHttpResponse
      </className>
      <methodName>
        setStatusLine
      </methodName>
      <methodSignature>
        (Lorg/apache/http/StatusLine;)V
      </methodSignature>
      <fullMethod>
        public  void setStatusLine(org.apache.http.StatusLine)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/database/DatabaseHelper;Lch/hsr/se2p/mrt/application/MRTApplication;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(ch.hsr.se2p.mrt.database.DatabaseHelper, ch.hsr.se2p.mrt.application.MRTApplication)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        synchronize
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void synchronize()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizerTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationService
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationService
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationService
      </className>
      <methodName>
        onBind
      </methodName>
      <methodSignature>
        (Landroid/content/Intent;)Landroid/os/IBinder;
      </methodSignature>
      <fullMethod>
        public  android.os.IBinder onBind(android.content.Intent)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationService
      </className>
      <methodName>
        onCreate
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void onCreate()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationService
      </className>
      <methodName>
        onDestroy
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void onDestroy()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationService
      </className>
      <methodName>
        onStartCommand
      </methodName>
      <methodSignature>
        (Landroid/content/Intent;II)I
      </methodSignature>
      <fullMethod>
        public  int onStartCommand(android.content.Intent, int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceSpec
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceSpec
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceSpec
      </className>
      <methodName>
        getSynchronizers
      </methodName>
      <methodSignature>
        ()[Ljava/lang/Class&lt;*&gt;;
      </methodSignature>
      <fullMethod>
        protected  java.lang.Class&lt;?&gt;[] getSynchronizers()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTask
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTask
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/services/SynchronizationService;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(ch.hsr.se2p.mrt.services.SynchronizationService)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTask
      </className>
      <methodName>
        getSynchronizationServiceSpec
      </methodName>
      <methodSignature>
        ()Lch/hsr/se2p/mrt/services/SynchronizationServiceSpec;
      </methodSignature>
      <fullMethod>
        protected  ch.hsr.se2p.mrt.services.SynchronizationServiceSpec getSynchronizationServiceSpec()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTask
      </className>
      <methodName>
        loadPreferences
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void loadPreferences()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTask
      </className>
      <methodName>
        login
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        private  boolean login()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTask
      </className>
      <methodName>
        newSynchronizerInstance
      </methodName>
      <methodSignature>
        (Ljava/lang/Class&lt;Lch/hsr/se2p/mrt/services/Synchronizer;&gt;;)Lch/hsr/se2p/mrt/services/Synchronizer;
      </methodSignature>
      <fullMethod>
        private  ch.hsr.se2p.mrt.services.Synchronizer newSynchronizerInstance(java.lang.Class&lt;ch.hsr.se2p.mrt.services.Synchronizer&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTaskTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/database/DatabaseHelper;Lch/hsr/se2p/mrt/application/MRTApplication;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(ch.hsr.se2p.mrt.database.DatabaseHelper, ch.hsr.se2p.mrt.application.MRTApplication)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        getTimeEntriesToTransmit
      </methodName>
      <methodSignature>
        ()Ljava/util/List&lt;Lch/hsr/se2p/mrt/models/TimeEntry;&gt;;
      </methodSignature>
      <fullMethod>
        private  java.util.List&lt;ch.hsr.se2p.mrt.models.TimeEntry&gt; getTimeEntriesToTransmit()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        setRelationObjectsOnTimeEntry
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/TimeEntry;)V
      </methodSignature>
      <fullMethod>
        private  void setRelationObjectsOnTimeEntry(ch.hsr.se2p.mrt.models.TimeEntry)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizerTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizer
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizer
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/database/DatabaseHelper;Lch/hsr/se2p/mrt/application/MRTApplication;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(ch.hsr.se2p.mrt.database.DatabaseHelper, ch.hsr.se2p.mrt.application.MRTApplication)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizer
      </className>
      <methodName>
        handleCreation
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntryType;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/TimeEntryType;)V
      </methodSignature>
      <fullMethod>
        private  void handleCreation(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntryType, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.TimeEntryType)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizer
      </className>
      <methodName>
        handleUpdate
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntryType;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/TimeEntryType;)V
      </methodSignature>
      <fullMethod>
        private  void handleUpdate(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntryType, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.TimeEntryType)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizer
      </className>
      <methodName>
        synchronize
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void synchronize()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizerTest
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt
      </package>
      <className>
        ISO8601DateParserHelperForTests
      </className>
      <methodName>
        parse
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/util/Date;
      </methodSignature>
      <fullMethod>
        public static  java.util.Date parse(java.lang.String)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LocationService$1
      </className>
      <methodName>
        onLocationChanged
      </methodName>
      <methodSignature>
        (Landroid/location/Location;)V
      </methodSignature>
      <fullMethod>
        public  void onLocationChanged(android.location.Location)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        checkPreferencesForAutoLogin
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void checkPreferencesForAutoLogin()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        processLogin
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        private  void processLogin(java.lang.String, java.lang.String)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        Measurement
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Z)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(boolean)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        Measurement
      </className>
      <methodName>
        setTimeEntryType
      </methodName>
      <methodSignature>
        (Landroid/widget/Spinner;)V
      </methodSignature>
      <fullMethod>
        private  void setTimeEntryType(android.widget.Spinner)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        onDestroy
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void onDestroy()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        saveGpsPosition
      </methodName>
      <methodSignature>
        ()Ljava/lang/Integer;
      </methodSignature>
      <fullMethod>
        private  java.lang.Integer saveGpsPosition()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        setGPSImage
      </methodName>
      <methodSignature>
        (Z)V
      </methodSignature>
      <fullMethod>
        private  void setGPSImage(boolean)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        startOrStopTimeMeasurement
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void startOrStopTimeMeasurement()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        setSpinner
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void setSpinner()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        startAndStopTimeMeasurement
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void startAndStopTimeMeasurement()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        testCreateTimeEntryWithCustomer
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testCreateTimeEntryWithCustomer()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        testCreateTimeEntryWithDescription
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testCreateTimeEntryWithDescription()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        testCreateTimeEntryWithInvalidCustomer
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testCreateTimeEntryWithInvalidCustomer()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        testCreateTimeEntryWithTimeEntryType
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testCreateTimeEntryWithTimeEntryType()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivityTest
      </className>
      <methodName>
        testSpinnerSelection
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testSpinnerSelection()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        logout
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void logout()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        getCustomerDao
      </methodName>
      <methodSignature>
        ()Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/Customer;Ljava/lang/Integer;&gt;;
      </methodSignature>
      <fullMethod>
        public synchronized  com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.Customer, java.lang.Integer&gt; getCustomerDao()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        getGpsPositionDao
      </methodName>
      <methodSignature>
        ()Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/GpsPosition;Ljava/lang/Integer;&gt;;
      </methodSignature>
      <fullMethod>
        public synchronized  com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.GpsPosition, java.lang.Integer&gt; getGpsPositionDao()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        getTimeEntryDao
      </methodName>
      <methodSignature>
        ()Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntry;Ljava/lang/Integer;&gt;;
      </methodSignature>
      <fullMethod>
        public synchronized  com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntry, java.lang.Integer&gt; getTimeEntryDao()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        getTimeEntryTypeDao
      </methodName>
      <methodSignature>
        ()Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntryType;Ljava/lang/Integer;&gt;;
      </methodSignature>
      <fullMethod>
        public synchronized  com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntryType, java.lang.Integer&gt; getTimeEntryTypeDao()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        onCreate
      </methodName>
      <methodSignature>
        (Landroid/database/sqlite/SQLiteDatabase;Lcom/j256/ormlite/support/ConnectionSource;)V
      </methodSignature>
      <fullMethod>
        public  void onCreate(android.database.sqlite.SQLiteDatabase, com.j256.ormlite.support.ConnectionSource)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.database
      </package>
      <className>
        DatabaseHelper
      </className>
      <methodName>
        reset
      </methodName>
      <methodSignature>
        (Landroid/database/sqlite/SQLiteDatabase;Lcom/j256/ormlite/support/ConnectionSource;)V
      </methodSignature>
      <fullMethod>
        private  void reset(android.database.sqlite.SQLiteDatabase, com.j256.ormlite.support.ConnectionSource)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        compareTo
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)I
      </methodSignature>
      <fullMethod>
        public  int compareTo(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        compareToNonNullDistance
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)I
      </methodSignature>
      <fullMethod>
        private  int compareToNonNullDistance(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        compareToNullDistance
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        private  int compareToNullDistance()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        fromJSON
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)Z
      </methodSignature>
      <fullMethod>
        public  boolean fromJSON(org.json.JSONObject)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        getDistanceString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        private  java.lang.String getDistanceString()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        setAddressAndGpsPosition
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)V
      </methodSignature>
      <fullMethod>
        private  void setAddressAndGpsPosition(org.json.JSONObject)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        setGpsPositionId
      </methodName>
      <methodSignature>
        (Ljava/lang/Integer;)V
      </methodSignature>
      <fullMethod>
        public  void setGpsPositionId(java.lang.Integer)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        setNormalAttributes
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)V
      </methodSignature>
      <fullMethod>
        private  void setNormalAttributes(org.json.JSONObject)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        CustomerTest
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        CustomerTest
      </className>
      <methodName>
        testFromJSON
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testFromJSON()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        ISO8601DateParser
      </className>
      <methodName>
        parse
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/util/Date;
      </methodSignature>
      <fullMethod>
        protected static  java.util.Date parse(java.lang.String)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        processConfirmation
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)Z
      </methodSignature>
      <fullMethod>
        public  boolean processConfirmation(org.json.JSONObject)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTest
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTest
      </className>
      <methodName>
        testCreate
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testCreate()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTest
      </className>
      <methodName>
        testFind
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testFind()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTest
      </className>
      <methodName>
        testSetTransmitted
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testSetTransmitted()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        parseMembersFromJson
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)V
      </methodSignature>
      <fullMethod>
        private  void parseMembersFromJson(org.json.JSONObject)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTypeTest
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryTypeTest
      </className>
      <methodName>
        testFromJSON
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testFromJSON()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        User
      </className>
      <methodName>
        fromJSON
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)Z
      </methodSignature>
      <fullMethod>
        public  boolean fromJSON(org.json.JSONObject)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        UserTest
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        UserTest
      </className>
      <methodName>
        testFromJSON
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testFromJSON()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelper
      </className>
      <methodName>
        synchronize
      </methodName>
      <methodSignature>
        (Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;Ljava/lang/Class&lt;+Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)Z
      </methodSignature>
      <fullMethod>
        public  boolean synchronize(java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;, java.lang.Class&lt;? extends ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelper
      </className>
      <methodName>
        updateOrCreateReceivables
      </methodName>
      <methodSignature>
        (Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;Lorg/json/JSONArray;Ljava/lang/Class&lt;+Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)V
      </methodSignature>
      <fullMethod>
        private  void updateOrCreateReceivables(java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;, org.json.JSONArray, java.lang.Class&lt;? extends ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        getCustomerInJson
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/sql/Timestamp;Z)Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        private  org.json.JSONObject getCustomerInJson(java.lang.String, java.lang.String, int, java.lang.String, java.sql.Timestamp, boolean)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        responseFor
      </methodName>
      <methodSignature>
        (Ljava/util/ArrayList&lt;Lch/hsr/se2p/mrt/models/Customer;&gt;;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        private  java.lang.String responseFor(java.util.ArrayList&lt;ch.hsr.se2p.mrt.models.Customer&gt;)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        handleResponse
      </methodName>
      <methodSignature>
        (Lorg/apache/http/HttpResponse;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        protected  java.lang.String handleResponse(org.apache.http.HttpResponse)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        HttpHelper
      </className>
      <methodName>
        prepareRequest
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/Object;Lorg/apache/http/client/methods/HttpEntityEnclosingRequestBase;)V
      </methodSignature>
      <fullMethod>
        protected  void prepareRequest(java.lang.String, java.lang.Object, org.apache.http.client.methods.HttpEntityEnclosingRequestBase)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryHelper
      </className>
      <methodName>
        transmit
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/interfaces/Transmittable;)Z
      </methodSignature>
      <fullMethod>
        public  boolean transmit(ch.hsr.se2p.mrt.interfaces.Transmittable)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryTypeHelper
      </className>
      <methodName>
        synchronize
      </methodName>
      <methodSignature>
        (Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;Ljava/lang/Class&lt;+Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)Z
      </methodSignature>
      <fullMethod>
        public  boolean synchronize(java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;, java.lang.Class&lt;? extends ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryTypeHelper
      </className>
      <methodName>
        updateOrCreateReceivables
      </methodName>
      <methodSignature>
        (Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;Lorg/json/JSONArray;Ljava/lang/Class&lt;+Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)V
      </methodSignature>
      <fullMethod>
        private  void updateOrCreateReceivables(java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;, org.json.JSONArray, java.lang.Class&lt;? extends ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        UserHelperTest
      </className>
      <methodName>
        testLoginWithServer
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testLoginWithServer()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        handleGpsPosition
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)V
      </methodSignature>
      <fullMethod>
        private  void handleGpsPosition(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        handleUpdate
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/Customer;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/Customer;)V
      </methodSignature>
      <fullMethod>
        private  void handleUpdate(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.Customer, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        updatePosition
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)V
      </methodSignature>
      <fullMethod>
        private  void updatePosition(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTask
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        SynchronizationServiceTask
      </className>
      <methodName>
        runSynchronizers
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void runSynchronizers()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        handleTransmittedTimeEntry
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntry;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/network/TimeEntryHelper;Lch/hsr/se2p/mrt/models/TimeEntry;)V
      </methodSignature>
      <fullMethod>
        private  void handleTransmittedTimeEntry(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntry, java.lang.Integer&gt;, ch.hsr.se2p.mrt.network.TimeEntryHelper, ch.hsr.se2p.mrt.models.TimeEntry)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        setCustomerRelationOnTimeEntry
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/TimeEntry;)V
      </methodSignature>
      <fullMethod>
        private  void setCustomerRelationOnTimeEntry(ch.hsr.se2p.mrt.models.TimeEntry)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        setGpsPositionRelationOnTimeEntry
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/TimeEntry;)V
      </methodSignature>
      <fullMethod>
        private  void setGpsPositionRelationOnTimeEntry(ch.hsr.se2p.mrt.models.TimeEntry)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        setTimeEntryTypeRelationOnTimeEntry
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/TimeEntry;)V
      </methodSignature>
      <fullMethod>
        private  void setTimeEntryTypeRelationOnTimeEntry(ch.hsr.se2p.mrt.models.TimeEntry)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        setTransmitted
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntry;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/TimeEntry;)V
      </methodSignature>
      <fullMethod>
        private  void setTransmitted(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntry, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.TimeEntry)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        synchronize
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void synchronize()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        LoginActivity
      </className>
      <methodName>
        checkLoginData
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void checkLoginData()
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        Measurement
      </className>
      <methodName>
        setCustomer
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/MRTAutocompleteSpinner;Ljava/util/List&lt;Lch/hsr/se2p/mrt/models/Customer;&gt;;)V
      </methodSignature>
      <fullMethod>
        private  void setCustomer(ch.hsr.se2p.mrt.activities.MRTAutocompleteSpinner, java.util.List&lt;ch.hsr.se2p.mrt.models.Customer&gt;)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        calculateAndSetDistances
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/GpsPosition;Ljava/lang/Integer;&gt;;Ljava/util/List&lt;Lch/hsr/se2p/mrt/models/Customer;&gt;;Lch/hsr/se2p/mrt/models/GpsPosition;)V
      </methodSignature>
      <fullMethod>
        private static  void calculateAndSetDistances(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.GpsPosition, java.lang.Integer&gt;, java.util.List&lt;ch.hsr.se2p.mrt.models.Customer&gt;, ch.hsr.se2p.mrt.models.GpsPosition)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        onOptionsItemSelected
      </methodName>
      <methodSignature>
        (Landroid/view/MenuItem;)Z
      </methodSignature>
      <fullMethod>
        public  boolean onOptionsItemSelected(android.view.MenuItem)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        login
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;Z)V
      </methodSignature>
      <fullMethod>
        public  void login(java.lang.String, java.lang.String, boolean)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.application
      </package>
      <className>
        MRTApplication
      </className>
      <methodName>
        mayLogin
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean mayLogin()
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        bothDistancesNull
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)Z
      </methodSignature>
      <fullMethod>
        private  boolean bothDistancesNull(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        hasGpsPosition
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean hasGpsPosition()
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        hasCustomer
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean hasCustomer()
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        hasGpsPosition
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean hasGpsPosition()
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        hasTimeEntryType
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean hasTimeEntryType()
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        processTransmission
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)Z
      </methodSignature>
      <fullMethod>
        public  boolean processTransmission(org.json.JSONObject)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntryType
      </className>
      <methodName>
        fromJSON
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)Z
      </methodSignature>
      <fullMethod>
        public  boolean fromJSON(org.json.JSONObject)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelper
      </className>
      <methodName>
        generateJSONRequest
      </methodName>
      <methodSignature>
        (Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        protected  org.json.JSONObject generateJSONRequest(java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelper
      </className>
      <methodName>
        updateOrCreateReceivable
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/interfaces/Receivable;Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;Lorg/json/JSONObject;)V
      </methodSignature>
      <fullMethod>
        private  void updateOrCreateReceivable(ch.hsr.se2p.mrt.interfaces.Receivable, java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;, org.json.JSONObject)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        assertEqualCustomer
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;Lch/hsr/se2p/mrt/models/Customer;)V
      </methodSignature>
      <fullMethod>
        private  void assertEqualCustomer(ch.hsr.se2p.mrt.models.Customer, ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryTypeHelper
      </className>
      <methodName>
        generateJSONRequest
      </methodName>
      <methodSignature>
        (Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)Lorg/json/JSONObject;
      </methodSignature>
      <fullMethod>
        protected  org.json.JSONObject generateJSONRequest(java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        TimeEntryTypeHelper
      </className>
      <methodName>
        updateOrCreateReceivable
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/interfaces/Receivable;Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;Lorg/json/JSONObject;)V
      </methodSignature>
      <fullMethod>
        private  void updateOrCreateReceivable(ch.hsr.se2p.mrt.interfaces.Receivable, java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;, org.json.JSONObject)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        existingCustomer
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)Z
      </methodSignature>
      <fullMethod>
        private  boolean existingCustomer(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        handleCreation
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/Customer;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/Customer;)Z
      </methodSignature>
      <fullMethod>
        private  boolean handleCreation(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.Customer, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        processCustomer
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/Customer;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/Customer;)V
      </methodSignature>
      <fullMethod>
        protected  void processCustomer(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.Customer, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        synchronizeCustomers
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/Customer;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/network/CustomerHelper;Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)V
      </methodSignature>
      <fullMethod>
        protected  void synchronizeCustomers(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.Customer, java.lang.Integer&gt;, ch.hsr.se2p.mrt.network.CustomerHelper, java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntrySynchronizer
      </className>
      <methodName>
        transmitTimeEnties
      </methodName>
      <methodSignature>
        (Ljava/util/List&lt;Lch/hsr/se2p/mrt/models/TimeEntry;&gt;;)V
      </methodSignature>
      <fullMethod>
        private  void transmitTimeEnties(java.util.List&lt;ch.hsr.se2p.mrt.models.TimeEntry&gt;)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizer
      </className>
      <methodName>
        handleDeletion
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntryType;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/TimeEntryType;)Z
      </methodSignature>
      <fullMethod>
        private  boolean handleDeletion(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntryType, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.TimeEntryType)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizer
      </className>
      <methodName>
        needsUpdating
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/TimeEntryType;)Z
      </methodSignature>
      <fullMethod>
        private  boolean needsUpdating(ch.hsr.se2p.mrt.models.TimeEntryType)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizer
      </className>
      <methodName>
        processTimeEntryType
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntryType;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/TimeEntryType;)V
      </methodSignature>
      <fullMethod>
        protected  void processTimeEntryType(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntryType, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.TimeEntryType)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        TimeEntryTypeSynchronizer
      </className>
      <methodName>
        synchronizeTimeEntryTypes
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/TimeEntryType;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/network/TimeEntryTypeHelper;Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)V
      </methodSignature>
      <fullMethod>
        protected  void synchronizeTimeEntryTypes(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.TimeEntryType, java.lang.Integer&gt;, ch.hsr.se2p.mrt.network.TimeEntryTypeHelper, java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        Measurement
      </className>
      <methodName>
        getCustomer
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/activities/MRTAutocompleteSpinner;Ljava/util/List&lt;Lch/hsr/se2p/mrt/models/Customer;&gt;;)Lch/hsr/se2p/mrt/models/Customer;
      </methodSignature>
      <fullMethod>
        private  ch.hsr.se2p.mrt.models.Customer getCustomer(ch.hsr.se2p.mrt.activities.MRTAutocompleteSpinner, java.util.List&lt;ch.hsr.se2p.mrt.models.Customer&gt;)
      </fullMethod>
      <crap>
        20.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.activities
      </package>
      <className>
        TimeEntryActivity
      </className>
      <methodName>
        calculateAndSetDistances
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/GpsPosition;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/GpsPosition;Lch/hsr/se2p/mrt/models/Customer;)V
      </methodSignature>
      <fullMethod>
        private static  void calculateAndSetDistances(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.GpsPosition, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.GpsPosition, ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        20.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        Customer
      </className>
      <methodName>
        compareToNotEquals
      </methodName>
      <methodSignature>
        (Lch/hsr/se2p/mrt/models/Customer;)I
      </methodSignature>
      <fullMethod>
        private  int compareToNotEquals(ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        20.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.models
      </package>
      <className>
        TimeEntry
      </className>
      <methodName>
        putRelationsToJson
      </methodName>
      <methodSignature>
        (Lorg/json/JSONObject;)V
      </methodSignature>
      <fullMethod>
        private  void putRelationsToJson(org.json.JSONObject)
      </fullMethod>
      <crap>
        20.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.network
      </package>
      <className>
        CustomerHelperTest
      </className>
      <methodName>
        assertSameList
      </methodName>
      <methodSignature>
        (Ljava/util/ArrayList&lt;Lch/hsr/se2p/mrt/models/Customer;&gt;;Ljava/util/List&lt;Lch/hsr/se2p/mrt/interfaces/Receivable;&gt;;)V
      </methodSignature>
      <fullMethod>
        protected  void assertSameList(java.util.ArrayList&lt;ch.hsr.se2p.mrt.models.Customer&gt;, java.util.List&lt;ch.hsr.se2p.mrt.interfaces.Receivable&gt;)
      </fullMethod>
      <crap>
        20.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        ch.hsr.se2p.mrt.services
      </package>
      <className>
        CustomerSynchronizer
      </className>
      <methodName>
        handleDeletion
      </methodName>
      <methodSignature>
        (Lcom/j256/ormlite/dao/Dao&lt;Lch/hsr/se2p/mrt/models/Customer;Ljava/lang/Integer;&gt;;Lch/hsr/se2p/mrt/models/Customer;)Z
      </methodSignature>
      <fullMethod>
        private  boolean handleDeletion(com.j256.ormlite.dao.Dao&lt;ch.hsr.se2p.mrt.models.Customer, java.lang.Integer&gt;, ch.hsr.se2p.mrt.models.Customer)
      </fullMethod>
      <crap>
        20.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
  </methods>
</crap_result>
